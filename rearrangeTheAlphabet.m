(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



SetOptions[InputNotebook[], AutoGeneratedPackage->Automatic]


percents = CloudGet["https://www.wolframcloud.com/objects/e338adb3-f090-4867-8456-f3f66c422f38"];
sorted = Reverse@Sort[percents];
BarChart[sorted, ChartLabels->Keys@sorted]


percentsInverse = AssociationThread[Values@percents, Keys@percents];	
ValuesToLetters[list_] := AssociationThread[percentsInverse[#]& /@ list, list]


AddOneToSmallestGroup[groups_, remaining_] := (
	sortedByTotal = Reverse@SortBy[groups, Total@#&];
	totals = Total /@ sortedByTotal;
	nextGreatest = First@remaining;
	next = Append[Most@sortedByTotal, Append[Last@sortedByTotal, nextGreatest]];
	index = First@First@Position[remaining, nextGreatest];
	stillStanding = Delete[remaining, index];
	{ next, stillStanding }
)


MakeGroups[n_] := (
	values = Values@Reverse@Sort[percents];
	(* start with the n largest values, one each in n groups *)
	groups = List /@ values[[1;;n]];
	(* and assign the 26-n remaining values *)
	remaining = values[[n + 1;;]];
	While[Length@remaining > 0, (
		{ groups, remaining } = AddOneToSmallestGroup[groups, remaining];
	)];
	letteredGroups = ValuesToLetters /@ groups
)


SortNewAlphabet[newGroupsN_] := (
	SortBy[Keys[KeySort /@ newGroupsN], First@#&]
)


SortLettersByOldAlphabet[newGroups_] := SortBy[KeySort /@ newGroups, First@Keys@#&]


ChartGroups[newGroups_, width_:800] := (
	MakeChart[newGroups, Keys@newGroups, width]
)


ChartGroupsSorted[newGroups_, width_:800] := (
	sortedNewGroups = SortLettersByOldAlphabet[newGroups];
	sortedAlphabet = SortNewAlphabet[newGroups];
	MakeChart[sortedNewGroups, sortedAlphabet, width]
)


MakeChart[buckets_, sortedAlphabet_, width_] := (
	labeled = Labeled[#, Style[ToString@Round[100. * Total@#, 0.01] <> "%", FontSize->14], Above]& /@ buckets;
	BarChart[
		Reverse@labeled,
		BarSpacing->0.8 * 800 / width,
		BarOrigin->Left,
		ChartLayout->"Stacked",
		ChartLabels->Placed[Style[#, LightGray, 12]& /@ Flatten@Reverse@Keys@buckets, Center],
		ChartStyle->"Rainbow",
		AspectRatio->0.25 * Sqrt@Length@buckets,
		ImageSize->width,
		PlotLabel->Row[Framed /@ First@Style[StringRiffle[#, ","]& /@ sortedAlphabet, FontSize->width / 32, Black, Bold]]
	]
)


ChartGroupsSorted[newGroups4, 720]


MakePlacard[newAlphabetSortedN_] := (
	sequences = StringRiffle[#, ","]& /@ newAlphabetSortedN;
	Column[Framed[Column[Flatten@{
		Style[#, 14, Darker@Gray]& /@ {"Please queue here for", "last names beginning with" },
		Style[#, 36]
	}, Center, Spacings->1], FrameMargins->{{20,20},{20,16}}, RoundingRadius->5, ImageSize->400, Alignment->Center]& /@ sequences]
)



